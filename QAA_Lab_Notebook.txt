1) Logged into talapas, moved to QAA directory, then started an interactive session.
    $ cd /projects/bgmp/tizzard/bioinfo/Bi623/QAA/
    $ srun -A bgmp -p bgmp -c2 --pty bash

2) Checked which libaries I was assigned.
    $ vim QAA_data_assignments.txt
        Evan    28_4D_mbnl_S20_L008     2_2B_control_S2_L008

3) Created QAA conda environment. Downloaded FastQC and verified version 0.12.1 was properly installed.
    $ conda create --name QAA
    $ conda activate QAA
    $ conda install bioconda::fastqc
    $  fastqc --version
        FastQC v0.12.1                                   

4) Checked fastqc help page. Adding here for ease of reference:
    $ fastqc -help

            FastQC - A high throughput sequence QC analysis tool

SYNOPSIS

        fastqc seqfile1 seqfile2 .. seqfileN

    fastqc [-o output dir] [--(no)extract] [-f fastq|bam|sam] 
           [-c contaminant file] seqfile1 .. seqfileN
...
...


5) Made an output directory for fastqc, then wrote, gave execute permission, and ran "runfastqc.sh" script to run fastqc on all four fastq.gz files. Runfastqc.sh also times the length of each run for later analysis.
    $ mkdir fastqc_output
    $ vim runfastqc.sh
    $ chmod 775 runfastqc.sh
    $ sbatch runfastqc.sh

    
    Run Times:
    
    ~ Library A ~
    -- 28_4D_mbnl_S20_L008_R1_001.fastq.gz --
	User time (seconds): 58.34
	System time (seconds): 2.56
	Percent of CPU this job got: 96%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 1:03.27
    
    -- 28_4D_mbnl_S20_L008_R2_001.fastq.gz --
	User time (seconds): 61.61
	System time (seconds): 2.89
	Percent of CPU this job got: 103%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 1:02.27
    

    ~ Library B ~
    -- 2_2B_control_S2_L008_R1_001.fastq.gz --
	User time (seconds): 31.28
	System time (seconds): 1.34
	Percent of CPU this job got: 107%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:30.26

    -- 2_2B_control_S2_L008_R2_001.fastq.gz --
	User time (seconds): 31.78
	System time (seconds): 1.43
	Percent of CPU this job got: 106%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:31.25

6) Started to make, perhaps a bit retroactively, Rmarkdown file to begin documenting results. Checked per-base quality score distribution plots and per-base N content plots. Ensured proper consistency.
Added plots and comments to QAA.Rmd. Also needed to make a small file.tex so that I could left indent figure labels. Why R, why?
    file.tex:
    \usepackage[font=small,format=plain,labelfont=bf,up,textfont=normal,up,justification=justified,singlelinecheck=false]{caption}

7) Wrote and gave execute permissions runqsdist to run perbaseqsdistribution.py from Demux (Bi622) on four read files to compare plots and runtime.
    $ sbatch runqsdist.sh 

    Run Times:

    ~ Library A ~
    -- 28_4D_mbnl_S20_L008_R1_001.fastq.gz --
    User time (seconds): 212.46
    System time (seconds): 0.22
	Percent of CPU this job got: 98%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 3:36.20

    -- 28_4D_mbnl_S20_L008_R2_001.fastq.gz --
    User time (seconds): 222.90
    System time (seconds): 0.14
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 3:43.60


    ~ Library B ~
    -- 2_2B_control_S2_L008_R1_001.fastq.gz --
    User time (seconds): 100.67
    System time (seconds): 0.09
	Percent of CPU this job got: 100%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 1:40.38

    -- 2_2B_control_S2_L008_R2_001.fastq.gz --
    User time (seconds): 98.07
	System time (seconds): 0.10
	Percent of CPU this job got: 100%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 1:37.85

8) Continued updating Rmarkdown file. Created plots to compare runtime data. Did this in /Users/evan/bioinfo/Bi623/Assignments/QAA/QAA_plot_generation_data.Rmd.

9) Installed cutadapt (needs to be version 4.9) and Trimmomatic (version 0.39).

    $ conda install bioconda::cutadapt
    $ cutadapt --version                                                                                                                                                                                                                
        4.9
    
    $ conda install bioconda::trimmomatic
    $ trimmomatic -version
        0.39

10) Checked number of trimmed reads. Calculated proportion of reads trimmed.

### Library A ###
#Library A R1
$ wc -l /projects/bgmp/shared/2017_sequencing/demultiplexed/28_4D_mbnl_S20_L008_R1_001.fastq.gz
    3046932

#Library A R1 Adapter-Trimmed
$ wc -l ./adapter_trimmed_fastqs/adapter_trimmed_28_4D_mbnl_S20_L008_R1_001.fastq.gz 
    2947541

2947541 / 3046932 = 0.967379974347967
1 - 0.967379974347967 = 0.032620025652033 = 3.262% reads were trimmed in LibA R1


#Library A R2
$ wc -l /projects/bgmp/shared/2017_sequencing/demultiplexed/28_4D_mbnl_S20_L008_R2_001.fastq.gz
    3307220

#Library A R2 Adapter-Trimmed
$ wc -l ./adapter_trimmed_fastqs/adapter_trimmed_28_4D_mbnl_S20_L008_R2_001.fastq.gz 
    3268065

3268065 / 3307220 = 0.988160751325887
1 - 0.988160751325887 = 0.011839248674113 = 1.184% reads were trimmed in LibA R2



### Library B ###
#Library B R1
$ wc -l /projects/bgmp/shared/2017_sequencing/demultiplexed/2_2B_control_S2_L008_R1_001.fastq.gz 
    1366858

#Library B R1 Adapter-Trimmed
$ wc -l ./adapter_trimmed_fastqs/adapter_trimmed_2_2B_control_S2_L008_R1_001.fastq.gz 
    1331318

1331318 / 1366858 = 0.973998762124522
1 - 0.973998762124522 = 0.026001237875478 = 2.6% reads were trimmed in LibB R1



#Library B R2
$ wc -l /projects/bgmp/shared/2017_sequencing/demultiplexed/2_2B_control_S2_L008_R2_001.fastq.gz 
    1469877

#Library B R2 Adapter-Trimmed
$ wc -l ./adapter_trimmed_fastqs/adapter_trimmed_2_2B_control_S2_L008_R2_001.fastq.gz 
    1461654

1461654 / 1469877 = 0.99440565435067
1 - 0.99440565435067 = 0.00559434564933 = 0.559% reads were trimmed in LibB R2



11) Checked to make sure sequences properly contained corresponding adapter sequences. Made directory to contain trimmed fastq files. Wrote and made executable runcutadapt.sh to trim adapter sequences for all 4 reads.
Used adapter sequences provided by assignment, as I couldn't figure out how to determine them myself.
    
    #Library A: R1
    $ zcat /projects/bgmp/shared/2017_sequencing/demultiplexed/28_4D_mbnl_S20_L008_R1_001.fastq.gz | grep "AGATCGGAAGAGCACACGTCTGAACTCCAGTCA" | wc -l
        56758
    
    #Library B: R1
    $ zcat /projects/bgmp/shared/2017_sequencing/demultiplexed/2_2B_control_S2_L008_R1_001.fastq.gz | grep "AGATCGGAAGAGCACACGTCTGAACTCCAGTCA" | wc -l
        31917
    
    #Library A: R2
    $ zcat /projects/bgmp/shared/2017_sequencing/demultiplexed/28_4D_mbnl_S20_L008_R2_001.fastq.gz | grep "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT" | wc -l
        57626

    #Library B: R2
    $ zcat /projects/bgmp/shared/2017_sequencing/demultiplexed/2_2B_control_S2_L008_R2_001.fastq.gz | grep "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT" | wc -l
        31965
    
    $ mkdir adapter_trimmed_fastqs

    $ vim runcutadapt.sh

    $ chmod 775 runcutadapt.sh

    $ sbatch runcutadapt.sh

12) Made a new directory for Trimmomatic output. Wrote and made executable runtrimmomatic.sh to quality trim reads.
    
    $ mkdir quality_trimmed_fastqs

    $ vim runrtrimmomatic.sh

    $ chmod 775 runtrimmomatic.sh

    $ sbatch runtrimmomatic.sh

13) Made read length distribution files of trimmed data. Generated plots in R using ggplot. Added to markdown report.
    $ cd ./quality_trimmed_fastqs/
    
    $ zcat qual_trimmed_28_4D_mbnl_S20_L008_R1_001_paired.fastq.gz | grep -A1 -E '^@' | grep -v '^@' | grep -v '^-' | awk '{print length($0)}' | sort -n | uniq -c > 28_4D_mbnl_S20_L008_R1_001_paired_length_distribution.txt
    $ zcat qual_trimmed_28_4D_mbnl_S20_L008_R2_001_paired.fastq.gz | grep -A1 -E '^@' | grep -v '^@' | grep -v '^-' | awk '{print length($0)}' | sort -n | uniq -c > 28_4D_mbnl_S20_L008_R2_001_paired_length_distribution.txt
    $ zcat qual_trimmed_2_2B_control_S2_L008_R1_001_paired.fastq.gz | grep -A1 -E '^@' | grep -v '^@' | grep -v '^-' | awk '{print length($0)}' | sort -n | uniq -c > 2_2B_control_S2_L008_R1_001_paired_length_distribution.txt
    $ zcat qual_trimmed_2_2B_control_S2_L008_R2_001_paired.fastq.gz | grep -A1 -E '^@' | grep -v '^@' | grep -v '^-' | awk '{print length($0)}' | sort -n | uniq -c > 2_2B_control_S2_L008_R2_001_paired_length_distribution.txt


14) Installed the rest of the required software - STAR, numpy, matplotlib, and htseq. Noted installed versions.

    $ conda install bioconda::star

    $ conda install anaconda::numpy

    $ conda install conda-forge::matplotlib

    $ conda install bioconda::htseq

    $ conda list
        ...
        star                      2.7.11b
        numpy                     1.26.4
        matplotlib                3.9.2 
        htseq                     2.0.5
        ...

15) Created directories for running STAR on the Ensembl mouse genome assembly file. Downloaded assembly fasta and gtf file to personal machine.
Used scp to copy files to talapas. Decompressed both files for genome generation. Wrote and ran "runstar_genomegen.sh".

    $ mkdir STAR
    $ mkdir ./STAR/Mus_musculus.GRCm39.dna.ens112.STAR_2.7.11b
    

    #Using terminal of personal machine:
    $ scp /Users/evan/bioinfo/Bi623/Assignments/QAA/Mus_musculus.GRCm39.112.gtf.gz tizzard@talapasvpn:/projects/bgmp/tizzard/bioinfo/Bi623/QAA/STAR/
    $ scp /Users/evan/bioinfo/Bi623/Assignments/QAA/Mus_musculus.GRCm39.dna.primary_assembly.fa.gz tizzard@talapasvpn:/projects/bgmp/tizzard/bioinfo/Bi623/QAA/STAR/

    $ gunzip ./STAR/*.gz

    $ sbatch runstar_genomegen.sh

16) After the genome was assembled, wrote and ran the runstar_alignreads.sh script to align both library pairs to the mouse genome. After
verifying the run was successful and the sam files were properly generated, copied and ran countmappedreads.py script from Bi621 PS8 on both
library sam files. Added this data to report.

    $ ./countmappedreads.py -i Mus_musculus.GRCm39.dna.ens112.STAR_2.7.11b_LibAAligned.out.sam
        Number of mapped reads: 22657642
        Number of unmapped reads: 793158

    $ ./countmappedreads.py -i Mus_musculus.GRCm39.dna.ens112.STAR_2.7.11b_LibBAligned.out.sam
        Number of mapped reads: 11078796
        Number of unmapped reads: 226280


17) Wrote and ran runhtseq-count.sh to count reads mapped to features - once with --stranded=yes and once with --stranded=reverse.

    $ sbatch runhtseq-count.sh

18) Manually made two separate count files from htseq-count output, as both are in one mess of an .out file. Used grep and awk to count feature
mappings.

    $ vim htseq_count_fwstranded.txt
    $ vim htseq_count_rvstranded.txt

    #Forward R1 Feature Map Count
    $ grep -v "^_" htseq_count_fwstranded.txt | awk '{s+=$2} END {print s}'
        411314
    
    #Forward R2 Feature Map Count
    $ grep -v "^_" htseq_count_fwstranded.txt | awk '{s+=$3} END {print s}'
        219590
    
    #All forward feature mappings: 630,904
    411314 + 219590 = 630904



    #Reverse R1 Feature Map Count
    $ grep -v "^_" htseq_count_rvstranded.txt | awk '{s+=$2} END {print s}'
        9700357

    #Reverse R2 Feature Map Count
    $ grep -v "^_" htseq_count_rvstranded.txt | awk '{s+=$3} END {print s}'
        4805275

    #All reverse feature mappings: 14,505,632
    9700357 + 4805275 = 14505632


    #Feature mapping comparison
    14505632 / 630904 = 22.992

    #The reverse count yielded essentially 23x more feature mappings than the forward count did. Interesting...

19) Finished markdown file, exported and saved it, added all images and code to github.